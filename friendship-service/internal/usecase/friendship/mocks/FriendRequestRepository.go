// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/malytinKonstantin/go-messenger-mono/friendship-service/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// FriendRequestRepository is an autogenerated mock type for the FriendRequestRepository type
type FriendRequestRepository struct {
	mock.Mock
}

// CreateFriendRequest provides a mock function with given fields: ctx, request
func (_m *FriendRequestRepository) CreateFriendRequest(ctx context.Context, request *models.FriendRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateFriendRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.FriendRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFriendRequest provides a mock function with given fields: ctx, requestID
func (_m *FriendRequestRepository) DeleteFriendRequest(ctx context.Context, requestID string) error {
	ret := _m.Called(ctx, requestID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFriendRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, requestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFriendship provides a mock function with given fields: ctx, userID, friendID
func (_m *FriendRequestRepository) DeleteFriendship(ctx context.Context, userID string, friendID string) error {
	ret := _m.Called(ctx, userID, friendID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFriendship")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, friendID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFriendRequestByID provides a mock function with given fields: ctx, requestID
func (_m *FriendRequestRepository) GetFriendRequestByID(ctx context.Context, requestID string) (*models.FriendRequest, error) {
	ret := _m.Called(ctx, requestID)

	if len(ret) == 0 {
		panic("no return value specified for GetFriendRequestByID")
	}

	var r0 *models.FriendRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.FriendRequest, error)); ok {
		return rf(ctx, requestID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.FriendRequest); ok {
		r0 = rf(ctx, requestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FriendRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, requestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIncomingAndOutgoingRequests provides a mock function with given fields: ctx, userID
func (_m *FriendRequestRepository) GetIncomingAndOutgoingRequests(ctx context.Context, userID string) ([]*models.FriendRequest, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetIncomingAndOutgoingRequests")
	}

	var r0 []*models.FriendRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.FriendRequest, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.FriendRequest); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.FriendRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIncomingRequests provides a mock function with given fields: ctx, userID
func (_m *FriendRequestRepository) GetIncomingRequests(ctx context.Context, userID string) ([]*models.FriendRequest, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetIncomingRequests")
	}

	var r0 []*models.FriendRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.FriendRequest, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.FriendRequest); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.FriendRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOutgoingRequests provides a mock function with given fields: ctx, userID
func (_m *FriendRequestRepository) GetOutgoingRequests(ctx context.Context, userID string) ([]*models.FriendRequest, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetOutgoingRequests")
	}

	var r0 []*models.FriendRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.FriendRequest, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.FriendRequest); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.FriendRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFriendRequestStatus provides a mock function with given fields: ctx, requestID, status, updatedAt
func (_m *FriendRequestRepository) UpdateFriendRequestStatus(ctx context.Context, requestID string, status string, updatedAt int64) error {
	ret := _m.Called(ctx, requestID, status, updatedAt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFriendRequestStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) error); ok {
		r0 = rf(ctx, requestID, status, updatedAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFriendRequestRepository creates a new instance of FriendRequestRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFriendRequestRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FriendRequestRepository {
	mock := &FriendRequestRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
