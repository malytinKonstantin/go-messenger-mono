// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: notification_service/v1/notification.proto

package notification_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _notification_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on SendNotificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendNotificationRequestMultiError, or nil if none found.
func (m *SendNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = SendNotificationRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMessage()) < 1 {
		err := SendNotificationRequestValidationError{
			field:  "Message",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	if len(errors) > 0 {
		return SendNotificationRequestMultiError(errors)
	}

	return nil
}

func (m *SendNotificationRequest) _validateUuid(uuid string) error {
	if matched := _notification_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SendNotificationRequestMultiError is an error wrapping multiple validation
// errors returned by SendNotificationRequest.ValidateAll() if the designated
// constraints aren't met.
type SendNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNotificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNotificationRequestMultiError) AllErrors() []error { return m }

// SendNotificationRequestValidationError is the validation error returned by
// SendNotificationRequest.Validate if the designated constraints aren't met.
type SendNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNotificationRequestValidationError) ErrorName() string {
	return "SendNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNotificationRequestValidationError{}

// Validate checks the field values on SendNotificationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendNotificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNotificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendNotificationResponseMultiError, or nil if none found.
func (m *SendNotificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNotificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return SendNotificationResponseMultiError(errors)
	}

	return nil
}

// SendNotificationResponseMultiError is an error wrapping multiple validation
// errors returned by SendNotificationResponse.ValidateAll() if the designated
// constraints aren't met.
type SendNotificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNotificationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNotificationResponseMultiError) AllErrors() []error { return m }

// SendNotificationResponseValidationError is the validation error returned by
// SendNotificationResponse.Validate if the designated constraints aren't met.
type SendNotificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNotificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNotificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNotificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNotificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNotificationResponseValidationError) ErrorName() string {
	return "SendNotificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendNotificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNotificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNotificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNotificationResponseValidationError{}

// Validate checks the field values on GetNotificationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotificationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotificationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotificationsRequestMultiError, or nil if none found.
func (m *GetNotificationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotificationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = GetNotificationsRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() <= 0 {
		err := GetNotificationsRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := GetNotificationsRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetNotificationsRequestMultiError(errors)
	}

	return nil
}

func (m *GetNotificationsRequest) _validateUuid(uuid string) error {
	if matched := _notification_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetNotificationsRequestMultiError is an error wrapping multiple validation
// errors returned by GetNotificationsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNotificationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotificationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotificationsRequestMultiError) AllErrors() []error { return m }

// GetNotificationsRequestValidationError is the validation error returned by
// GetNotificationsRequest.Validate if the designated constraints aren't met.
type GetNotificationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationsRequestValidationError) ErrorName() string {
	return "GetNotificationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationsRequestValidationError{}

// Validate checks the field values on GetNotificationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotificationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotificationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotificationsResponseMultiError, or nil if none found.
func (m *GetNotificationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotificationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNotifications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNotificationsResponseValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNotificationsResponseValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNotificationsResponseValidationError{
					field:  fmt.Sprintf("Notifications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return GetNotificationsResponseMultiError(errors)
	}

	return nil
}

// GetNotificationsResponseMultiError is an error wrapping multiple validation
// errors returned by GetNotificationsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNotificationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotificationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotificationsResponseMultiError) AllErrors() []error { return m }

// GetNotificationsResponseValidationError is the validation error returned by
// GetNotificationsResponse.Validate if the designated constraints aren't met.
type GetNotificationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationsResponseValidationError) ErrorName() string {
	return "GetNotificationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationsResponseValidationError{}

// Validate checks the field values on MarkNotificationAsReadRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MarkNotificationAsReadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarkNotificationAsReadRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MarkNotificationAsReadRequestMultiError, or nil if none found.
func (m *MarkNotificationAsReadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MarkNotificationAsReadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetNotificationId()); err != nil {
		err = MarkNotificationAsReadRequestValidationError{
			field:  "NotificationId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = MarkNotificationAsReadRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MarkNotificationAsReadRequestMultiError(errors)
	}

	return nil
}

func (m *MarkNotificationAsReadRequest) _validateUuid(uuid string) error {
	if matched := _notification_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// MarkNotificationAsReadRequestMultiError is an error wrapping multiple
// validation errors returned by MarkNotificationAsReadRequest.ValidateAll()
// if the designated constraints aren't met.
type MarkNotificationAsReadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarkNotificationAsReadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarkNotificationAsReadRequestMultiError) AllErrors() []error { return m }

// MarkNotificationAsReadRequestValidationError is the validation error
// returned by MarkNotificationAsReadRequest.Validate if the designated
// constraints aren't met.
type MarkNotificationAsReadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarkNotificationAsReadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarkNotificationAsReadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarkNotificationAsReadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarkNotificationAsReadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarkNotificationAsReadRequestValidationError) ErrorName() string {
	return "MarkNotificationAsReadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MarkNotificationAsReadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarkNotificationAsReadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarkNotificationAsReadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarkNotificationAsReadRequestValidationError{}

// Validate checks the field values on MarkNotificationAsReadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MarkNotificationAsReadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarkNotificationAsReadResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MarkNotificationAsReadResponseMultiError, or nil if none found.
func (m *MarkNotificationAsReadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MarkNotificationAsReadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return MarkNotificationAsReadResponseMultiError(errors)
	}

	return nil
}

// MarkNotificationAsReadResponseMultiError is an error wrapping multiple
// validation errors returned by MarkNotificationAsReadResponse.ValidateAll()
// if the designated constraints aren't met.
type MarkNotificationAsReadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarkNotificationAsReadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarkNotificationAsReadResponseMultiError) AllErrors() []error { return m }

// MarkNotificationAsReadResponseValidationError is the validation error
// returned by MarkNotificationAsReadResponse.Validate if the designated
// constraints aren't met.
type MarkNotificationAsReadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarkNotificationAsReadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarkNotificationAsReadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarkNotificationAsReadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarkNotificationAsReadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarkNotificationAsReadResponseValidationError) ErrorName() string {
	return "MarkNotificationAsReadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MarkNotificationAsReadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarkNotificationAsReadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarkNotificationAsReadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarkNotificationAsReadResponseValidationError{}

// Validate checks the field values on UpdateNotificationPreferencesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateNotificationPreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotificationPreferencesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateNotificationPreferencesRequestMultiError, or nil if none found.
func (m *UpdateNotificationPreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotificationPreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = UpdateNotificationPreferencesRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPreferences()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNotificationPreferencesRequestValidationError{
					field:  "Preferences",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNotificationPreferencesRequestValidationError{
					field:  "Preferences",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPreferences()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNotificationPreferencesRequestValidationError{
				field:  "Preferences",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateNotificationPreferencesRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateNotificationPreferencesRequest) _validateUuid(uuid string) error {
	if matched := _notification_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateNotificationPreferencesRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateNotificationPreferencesRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateNotificationPreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotificationPreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotificationPreferencesRequestMultiError) AllErrors() []error { return m }

// UpdateNotificationPreferencesRequestValidationError is the validation error
// returned by UpdateNotificationPreferencesRequest.Validate if the designated
// constraints aren't met.
type UpdateNotificationPreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotificationPreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotificationPreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotificationPreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotificationPreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotificationPreferencesRequestValidationError) ErrorName() string {
	return "UpdateNotificationPreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotificationPreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotificationPreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotificationPreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotificationPreferencesRequestValidationError{}

// Validate checks the field values on UpdateNotificationPreferencesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateNotificationPreferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotificationPreferencesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateNotificationPreferencesResponseMultiError, or nil if none found.
func (m *UpdateNotificationPreferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotificationPreferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateNotificationPreferencesResponseMultiError(errors)
	}

	return nil
}

// UpdateNotificationPreferencesResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateNotificationPreferencesResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateNotificationPreferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotificationPreferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotificationPreferencesResponseMultiError) AllErrors() []error { return m }

// UpdateNotificationPreferencesResponseValidationError is the validation error
// returned by UpdateNotificationPreferencesResponse.Validate if the
// designated constraints aren't met.
type UpdateNotificationPreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotificationPreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotificationPreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotificationPreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotificationPreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotificationPreferencesResponseValidationError) ErrorName() string {
	return "UpdateNotificationPreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotificationPreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotificationPreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotificationPreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotificationPreferencesResponseValidationError{}

// Validate checks the field values on GetNotificationPreferencesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetNotificationPreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotificationPreferencesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetNotificationPreferencesRequestMultiError, or nil if none found.
func (m *GetNotificationPreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotificationPreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = GetNotificationPreferencesRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetNotificationPreferencesRequestMultiError(errors)
	}

	return nil
}

func (m *GetNotificationPreferencesRequest) _validateUuid(uuid string) error {
	if matched := _notification_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetNotificationPreferencesRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetNotificationPreferencesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNotificationPreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotificationPreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotificationPreferencesRequestMultiError) AllErrors() []error { return m }

// GetNotificationPreferencesRequestValidationError is the validation error
// returned by GetNotificationPreferencesRequest.Validate if the designated
// constraints aren't met.
type GetNotificationPreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationPreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationPreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationPreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationPreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationPreferencesRequestValidationError) ErrorName() string {
	return "GetNotificationPreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationPreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationPreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationPreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationPreferencesRequestValidationError{}

// Validate checks the field values on GetNotificationPreferencesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetNotificationPreferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotificationPreferencesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetNotificationPreferencesResponseMultiError, or nil if none found.
func (m *GetNotificationPreferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotificationPreferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPreferences()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNotificationPreferencesResponseValidationError{
					field:  "Preferences",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNotificationPreferencesResponseValidationError{
					field:  "Preferences",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPreferences()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNotificationPreferencesResponseValidationError{
				field:  "Preferences",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNotificationPreferencesResponseMultiError(errors)
	}

	return nil
}

// GetNotificationPreferencesResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetNotificationPreferencesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNotificationPreferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotificationPreferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotificationPreferencesResponseMultiError) AllErrors() []error { return m }

// GetNotificationPreferencesResponseValidationError is the validation error
// returned by GetNotificationPreferencesResponse.Validate if the designated
// constraints aren't met.
type GetNotificationPreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationPreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationPreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationPreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationPreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationPreferencesResponseValidationError) ErrorName() string {
	return "GetNotificationPreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationPreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationPreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationPreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationPreferencesResponseValidationError{}

// Validate checks the field values on Notification with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Notification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Notification with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotificationMultiError, or
// nil if none found.
func (m *Notification) ValidateAll() error {
	return m.validate(true)
}

func (m *Notification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = NotificationValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = NotificationValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Message

	// no validation rules for Type

	// no validation rules for CreatedAt

	// no validation rules for IsRead

	if len(errors) > 0 {
		return NotificationMultiError(errors)
	}

	return nil
}

func (m *Notification) _validateUuid(uuid string) error {
	if matched := _notification_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// NotificationMultiError is an error wrapping multiple validation errors
// returned by Notification.ValidateAll() if the designated constraints aren't met.
type NotificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationMultiError) AllErrors() []error { return m }

// NotificationValidationError is the validation error returned by
// Notification.Validate if the designated constraints aren't met.
type NotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationValidationError) ErrorName() string { return "NotificationValidationError" }

// Error satisfies the builtin error interface
func (e NotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationValidationError{}

// Validate checks the field values on NotificationPreferences with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotificationPreferences) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationPreferences with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotificationPreferencesMultiError, or nil if none found.
func (m *NotificationPreferences) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationPreferences) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NewMessage

	// no validation rules for FriendRequest

	// no validation rules for System

	if len(errors) > 0 {
		return NotificationPreferencesMultiError(errors)
	}

	return nil
}

// NotificationPreferencesMultiError is an error wrapping multiple validation
// errors returned by NotificationPreferences.ValidateAll() if the designated
// constraints aren't met.
type NotificationPreferencesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationPreferencesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationPreferencesMultiError) AllErrors() []error { return m }

// NotificationPreferencesValidationError is the validation error returned by
// NotificationPreferences.Validate if the designated constraints aren't met.
type NotificationPreferencesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationPreferencesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationPreferencesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationPreferencesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationPreferencesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationPreferencesValidationError) ErrorName() string {
	return "NotificationPreferencesValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationPreferencesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationPreferences.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationPreferencesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationPreferencesValidationError{}
