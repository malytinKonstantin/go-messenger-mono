// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: friendship_service/v1/friendship.proto

package friendship_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _friendship_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on SendFriendRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendFriendRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendFriendRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendFriendRequestRequestMultiError, or nil if none found.
func (m *SendFriendRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendFriendRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = SendFriendRequestRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetFriendId()); err != nil {
		err = SendFriendRequestRequestValidationError{
			field:  "FriendId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendFriendRequestRequestMultiError(errors)
	}

	return nil
}

func (m *SendFriendRequestRequest) _validateUuid(uuid string) error {
	if matched := _friendship_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SendFriendRequestRequestMultiError is an error wrapping multiple validation
// errors returned by SendFriendRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type SendFriendRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendFriendRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendFriendRequestRequestMultiError) AllErrors() []error { return m }

// SendFriendRequestRequestValidationError is the validation error returned by
// SendFriendRequestRequest.Validate if the designated constraints aren't met.
type SendFriendRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendFriendRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendFriendRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendFriendRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendFriendRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendFriendRequestRequestValidationError) ErrorName() string {
	return "SendFriendRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendFriendRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendFriendRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendFriendRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendFriendRequestRequestValidationError{}

// Validate checks the field values on SendFriendRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendFriendRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendFriendRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendFriendRequestResponseMultiError, or nil if none found.
func (m *SendFriendRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendFriendRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		err = SendFriendRequestResponseValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendFriendRequestResponseMultiError(errors)
	}

	return nil
}

func (m *SendFriendRequestResponse) _validateUuid(uuid string) error {
	if matched := _friendship_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SendFriendRequestResponseMultiError is an error wrapping multiple validation
// errors returned by SendFriendRequestResponse.ValidateAll() if the
// designated constraints aren't met.
type SendFriendRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendFriendRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendFriendRequestResponseMultiError) AllErrors() []error { return m }

// SendFriendRequestResponseValidationError is the validation error returned by
// SendFriendRequestResponse.Validate if the designated constraints aren't met.
type SendFriendRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendFriendRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendFriendRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendFriendRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendFriendRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendFriendRequestResponseValidationError) ErrorName() string {
	return "SendFriendRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendFriendRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendFriendRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendFriendRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendFriendRequestResponseValidationError{}

// Validate checks the field values on AcceptFriendRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptFriendRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptFriendRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptFriendRequestRequestMultiError, or nil if none found.
func (m *AcceptFriendRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptFriendRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		err = AcceptFriendRequestRequestValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AcceptFriendRequestRequestMultiError(errors)
	}

	return nil
}

func (m *AcceptFriendRequestRequest) _validateUuid(uuid string) error {
	if matched := _friendship_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AcceptFriendRequestRequestMultiError is an error wrapping multiple
// validation errors returned by AcceptFriendRequestRequest.ValidateAll() if
// the designated constraints aren't met.
type AcceptFriendRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptFriendRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptFriendRequestRequestMultiError) AllErrors() []error { return m }

// AcceptFriendRequestRequestValidationError is the validation error returned
// by AcceptFriendRequestRequest.Validate if the designated constraints aren't met.
type AcceptFriendRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptFriendRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptFriendRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptFriendRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptFriendRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptFriendRequestRequestValidationError) ErrorName() string {
	return "AcceptFriendRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptFriendRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptFriendRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptFriendRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptFriendRequestRequestValidationError{}

// Validate checks the field values on AcceptFriendRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptFriendRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptFriendRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptFriendRequestResponseMultiError, or nil if none found.
func (m *AcceptFriendRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptFriendRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return AcceptFriendRequestResponseMultiError(errors)
	}

	return nil
}

// AcceptFriendRequestResponseMultiError is an error wrapping multiple
// validation errors returned by AcceptFriendRequestResponse.ValidateAll() if
// the designated constraints aren't met.
type AcceptFriendRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptFriendRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptFriendRequestResponseMultiError) AllErrors() []error { return m }

// AcceptFriendRequestResponseValidationError is the validation error returned
// by AcceptFriendRequestResponse.Validate if the designated constraints
// aren't met.
type AcceptFriendRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptFriendRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptFriendRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptFriendRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptFriendRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptFriendRequestResponseValidationError) ErrorName() string {
	return "AcceptFriendRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptFriendRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptFriendRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptFriendRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptFriendRequestResponseValidationError{}

// Validate checks the field values on RejectFriendRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectFriendRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectFriendRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RejectFriendRequestRequestMultiError, or nil if none found.
func (m *RejectFriendRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectFriendRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		err = RejectFriendRequestRequestValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RejectFriendRequestRequestMultiError(errors)
	}

	return nil
}

func (m *RejectFriendRequestRequest) _validateUuid(uuid string) error {
	if matched := _friendship_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RejectFriendRequestRequestMultiError is an error wrapping multiple
// validation errors returned by RejectFriendRequestRequest.ValidateAll() if
// the designated constraints aren't met.
type RejectFriendRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectFriendRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectFriendRequestRequestMultiError) AllErrors() []error { return m }

// RejectFriendRequestRequestValidationError is the validation error returned
// by RejectFriendRequestRequest.Validate if the designated constraints aren't met.
type RejectFriendRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectFriendRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectFriendRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectFriendRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectFriendRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectFriendRequestRequestValidationError) ErrorName() string {
	return "RejectFriendRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RejectFriendRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectFriendRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectFriendRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectFriendRequestRequestValidationError{}

// Validate checks the field values on RejectFriendRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectFriendRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectFriendRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RejectFriendRequestResponseMultiError, or nil if none found.
func (m *RejectFriendRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectFriendRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RejectFriendRequestResponseMultiError(errors)
	}

	return nil
}

// RejectFriendRequestResponseMultiError is an error wrapping multiple
// validation errors returned by RejectFriendRequestResponse.ValidateAll() if
// the designated constraints aren't met.
type RejectFriendRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectFriendRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectFriendRequestResponseMultiError) AllErrors() []error { return m }

// RejectFriendRequestResponseValidationError is the validation error returned
// by RejectFriendRequestResponse.Validate if the designated constraints
// aren't met.
type RejectFriendRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectFriendRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectFriendRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectFriendRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectFriendRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectFriendRequestResponseValidationError) ErrorName() string {
	return "RejectFriendRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RejectFriendRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectFriendRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectFriendRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectFriendRequestResponseValidationError{}

// Validate checks the field values on RemoveFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveFriendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveFriendRequestMultiError, or nil if none found.
func (m *RemoveFriendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveFriendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = RemoveFriendRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetFriendId()); err != nil {
		err = RemoveFriendRequestValidationError{
			field:  "FriendId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveFriendRequestMultiError(errors)
	}

	return nil
}

func (m *RemoveFriendRequest) _validateUuid(uuid string) error {
	if matched := _friendship_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RemoveFriendRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveFriendRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveFriendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveFriendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveFriendRequestMultiError) AllErrors() []error { return m }

// RemoveFriendRequestValidationError is the validation error returned by
// RemoveFriendRequest.Validate if the designated constraints aren't met.
type RemoveFriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveFriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveFriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveFriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveFriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveFriendRequestValidationError) ErrorName() string {
	return "RemoveFriendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveFriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveFriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveFriendRequestValidationError{}

// Validate checks the field values on RemoveFriendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveFriendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveFriendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveFriendResponseMultiError, or nil if none found.
func (m *RemoveFriendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveFriendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RemoveFriendResponseMultiError(errors)
	}

	return nil
}

// RemoveFriendResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveFriendResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveFriendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveFriendResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveFriendResponseMultiError) AllErrors() []error { return m }

// RemoveFriendResponseValidationError is the validation error returned by
// RemoveFriendResponse.Validate if the designated constraints aren't met.
type RemoveFriendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveFriendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveFriendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveFriendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveFriendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveFriendResponseValidationError) ErrorName() string {
	return "RemoveFriendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveFriendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveFriendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveFriendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveFriendResponseValidationError{}

// Validate checks the field values on GetFriendsListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendsListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendsListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendsListRequestMultiError, or nil if none found.
func (m *GetFriendsListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendsListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = GetFriendsListRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFriendsListRequestMultiError(errors)
	}

	return nil
}

func (m *GetFriendsListRequest) _validateUuid(uuid string) error {
	if matched := _friendship_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetFriendsListRequestMultiError is an error wrapping multiple validation
// errors returned by GetFriendsListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFriendsListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendsListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendsListRequestMultiError) AllErrors() []error { return m }

// GetFriendsListRequestValidationError is the validation error returned by
// GetFriendsListRequest.Validate if the designated constraints aren't met.
type GetFriendsListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendsListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendsListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendsListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendsListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendsListRequestValidationError) ErrorName() string {
	return "GetFriendsListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendsListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendsListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendsListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendsListRequestValidationError{}

// Validate checks the field values on GetFriendsListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendsListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendsListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendsListResponseMultiError, or nil if none found.
func (m *GetFriendsListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendsListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFriends() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFriendsListResponseValidationError{
						field:  fmt.Sprintf("Friends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFriendsListResponseValidationError{
						field:  fmt.Sprintf("Friends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFriendsListResponseValidationError{
					field:  fmt.Sprintf("Friends[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFriendsListResponseMultiError(errors)
	}

	return nil
}

// GetFriendsListResponseMultiError is an error wrapping multiple validation
// errors returned by GetFriendsListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFriendsListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendsListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendsListResponseMultiError) AllErrors() []error { return m }

// GetFriendsListResponseValidationError is the validation error returned by
// GetFriendsListResponse.Validate if the designated constraints aren't met.
type GetFriendsListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendsListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendsListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendsListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendsListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendsListResponseValidationError) ErrorName() string {
	return "GetFriendsListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendsListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendsListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendsListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendsListResponseValidationError{}

// Validate checks the field values on GetPendingRequestsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPendingRequestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPendingRequestsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPendingRequestsRequestMultiError, or nil if none found.
func (m *GetPendingRequestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPendingRequestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = GetPendingRequestsRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPendingRequestsRequestMultiError(errors)
	}

	return nil
}

func (m *GetPendingRequestsRequest) _validateUuid(uuid string) error {
	if matched := _friendship_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetPendingRequestsRequestMultiError is an error wrapping multiple validation
// errors returned by GetPendingRequestsRequest.ValidateAll() if the
// designated constraints aren't met.
type GetPendingRequestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPendingRequestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPendingRequestsRequestMultiError) AllErrors() []error { return m }

// GetPendingRequestsRequestValidationError is the validation error returned by
// GetPendingRequestsRequest.Validate if the designated constraints aren't met.
type GetPendingRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPendingRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPendingRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPendingRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPendingRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPendingRequestsRequestValidationError) ErrorName() string {
	return "GetPendingRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPendingRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPendingRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPendingRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPendingRequestsRequestValidationError{}

// Validate checks the field values on GetPendingRequestsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPendingRequestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPendingRequestsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPendingRequestsResponseMultiError, or nil if none found.
func (m *GetPendingRequestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPendingRequestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIncomingRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPendingRequestsResponseValidationError{
						field:  fmt.Sprintf("IncomingRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPendingRequestsResponseValidationError{
						field:  fmt.Sprintf("IncomingRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPendingRequestsResponseValidationError{
					field:  fmt.Sprintf("IncomingRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOutgoingRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPendingRequestsResponseValidationError{
						field:  fmt.Sprintf("OutgoingRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPendingRequestsResponseValidationError{
						field:  fmt.Sprintf("OutgoingRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPendingRequestsResponseValidationError{
					field:  fmt.Sprintf("OutgoingRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPendingRequestsResponseMultiError(errors)
	}

	return nil
}

// GetPendingRequestsResponseMultiError is an error wrapping multiple
// validation errors returned by GetPendingRequestsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetPendingRequestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPendingRequestsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPendingRequestsResponseMultiError) AllErrors() []error { return m }

// GetPendingRequestsResponseValidationError is the validation error returned
// by GetPendingRequestsResponse.Validate if the designated constraints aren't met.
type GetPendingRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPendingRequestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPendingRequestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPendingRequestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPendingRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPendingRequestsResponseValidationError) ErrorName() string {
	return "GetPendingRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPendingRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPendingRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPendingRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPendingRequestsResponseValidationError{}

// Validate checks the field values on Friend with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Friend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Friend with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FriendMultiError, or nil if none found.
func (m *Friend) ValidateAll() error {
	return m.validate(true)
}

func (m *Friend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = FriendValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Nickname

	// no validation rules for AvatarUrl

	// no validation rules for AddedAt

	if len(errors) > 0 {
		return FriendMultiError(errors)
	}

	return nil
}

func (m *Friend) _validateUuid(uuid string) error {
	if matched := _friendship_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// FriendMultiError is an error wrapping multiple validation errors returned by
// Friend.ValidateAll() if the designated constraints aren't met.
type FriendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendMultiError) AllErrors() []error { return m }

// FriendValidationError is the validation error returned by Friend.Validate if
// the designated constraints aren't met.
type FriendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendValidationError) ErrorName() string { return "FriendValidationError" }

// Error satisfies the builtin error interface
func (e FriendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendValidationError{}

// Validate checks the field values on FriendRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FriendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FriendRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FriendRequestMultiError, or
// nil if none found.
func (m *FriendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FriendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		err = FriendRequestValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetSenderId()); err != nil {
		err = FriendRequestValidationError{
			field:  "SenderId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetReceiverId()); err != nil {
		err = FriendRequestValidationError{
			field:  "ReceiverId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return FriendRequestMultiError(errors)
	}

	return nil
}

func (m *FriendRequest) _validateUuid(uuid string) error {
	if matched := _friendship_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// FriendRequestMultiError is an error wrapping multiple validation errors
// returned by FriendRequest.ValidateAll() if the designated constraints
// aren't met.
type FriendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendRequestMultiError) AllErrors() []error { return m }

// FriendRequestValidationError is the validation error returned by
// FriendRequest.Validate if the designated constraints aren't met.
type FriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendRequestValidationError) ErrorName() string { return "FriendRequestValidationError" }

// Error satisfies the builtin error interface
func (e FriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendRequestValidationError{}
