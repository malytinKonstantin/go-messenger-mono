syntax = "proto3";

package api.notification_service.v1;

import "validate/validate.proto";
import "google/api/field_behavior.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/malytinKonstantin/go-messenger-mono/proto/pkg/api/notification_service/v1;notification_service";

// Сервис для управления уведомлениями пользователей
service NotificationService {
  // Отправка уведомления пользователю
  rpc SendNotification(SendNotificationRequest) returns (SendNotificationResponse) {
    option (google.api.http) = {
      post: "/v1/notifications/send"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Отправка уведомления пользователю"
      tags: "NotificationService"
    };
  }

  // Получение списка уведомлений пользователя
  rpc GetNotifications(GetNotificationsRequest) returns (GetNotificationsResponse) {
    option (google.api.http) = {
      get: "/v1/notifications"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Получение списка уведомлений пользователя"
      tags: "NotificationService"
    };
  }

  // Пометка уведомления как прочитанное
  rpc MarkNotificationAsRead(MarkNotificationAsReadRequest) returns (MarkNotificationAsReadResponse) {
    option (google.api.http) = {
      post: "/v1/notifications/mark-as-read"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Пометка уведомления как прочитанное"
      tags: "NotificationService"
    };
  }

  // Обновление предпочтений уведомлений пользователя
  rpc UpdateNotificationPreferences(UpdateNotificationPreferencesRequest) returns (UpdateNotificationPreferencesResponse) {
    option (google.api.http) = {
      post: "/v1/notifications/preferences/update"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Обновление предпочтений уведомлений пользователя"
      tags: "NotificationService"
    };
  }

  // Получение предпочтений уведомлений пользователя
  rpc GetNotificationPreferences(GetNotificationPreferencesRequest) returns (GetNotificationPreferencesResponse) {
    option (google.api.http) = {
      get: "/v1/notifications/preferences"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Получение предпочтений уведомлений пользователя"
      tags: "NotificationService"
    };
  }
}

// Сообщение для запроса отправки уведомления
message SendNotificationRequest {
  // Идентификатор получателя
  string user_id = 1 [
    (validate.rules).string = {uuid: true},
    (google.api.field_behavior) = REQUIRED
  ];
  // Содержание уведомления
  string message = 2 [
    (validate.rules).string = {min_len: 1},
    (google.api.field_behavior) = REQUIRED
  ];
  // Тип уведомления
  NotificationType type = 3 [
    (google.api.field_behavior) = REQUIRED
  ];
}

// Сообщение для ответа на отправку уведомления
message SendNotificationResponse {
  // Успешность операции
  bool success = 1;
}

// Сообщение для запроса получения списка уведомлений пользователя
message GetNotificationsRequest {
  // Идентификатор пользователя
  string user_id = 1 [
    (validate.rules).string = {uuid: true},
    (google.api.field_behavior) = REQUIRED
  ];
  // Количество уведомлений для получения
  int32 limit = 2 [
    (validate.rules).int32 = { gt: 0 },
    (google.api.field_behavior) = OPTIONAL
  ];
  // Смещение для пагинации
  int32 offset = 3 [
    (validate.rules).int32 = { gte: 0 },
    (google.api.field_behavior) = OPTIONAL
  ];
}

// Сообщение для ответа с списком уведомлений
message GetNotificationsResponse {
  // Список уведомлений
  repeated Notification notifications = 1;
  // Общее количество уведомлений
  int32 total_count = 2;
}

// Сообщение для запроса пометки уведомления как прочитанного
message MarkNotificationAsReadRequest {
  // Идентификатор уведомления
  string notification_id = 1 [
    (validate.rules).string = {uuid: true},
    (google.api.field_behavior) = REQUIRED
  ];
  // Идентификатор пользователя
  string user_id = 2 [
    (validate.rules).string = {uuid: true},
    (google.api.field_behavior) = REQUIRED
  ];
}

// Сообщение для ответа на пометку уведомления как прочитанного
message MarkNotificationAsReadResponse {
  // Успешность операции
  bool success = 1;
}

// Сообщение для запроса обновления предпочтений уведомлений пользователя
message UpdateNotificationPreferencesRequest {
  // Идентификатор пользователя
  string user_id = 1 [
    (validate.rules).string = {uuid: true},
    (google.api.field_behavior) = REQUIRED
  ];
  // Новые предпочтения
  NotificationPreferences preferences = 2 [
    (google.api.field_behavior) = REQUIRED
  ];
}

// Сообщение для ответа на обновление предпочтений уведомлений
message UpdateNotificationPreferencesResponse {
  // Успешность операции
  bool success = 1;
}

// Сообщение для запроса получения предпочтений уведомлений пользователя
message GetNotificationPreferencesRequest {
  // Идентификатор пользователя
  string user_id = 1 [
    (validate.rules).string = {uuid: true},
    (google.api.field_behavior) = REQUIRED
  ];
}

// Сообщение для ответа с предпочтениями уведомлений
message GetNotificationPreferencesResponse {
  // Предпочтения уведомлений
  NotificationPreferences preferences = 1;
}

// Структура уведомления
message Notification {
  // Идентификатор уведомления (UUID)
  string id = 1 [
    (validate.rules).string = {uuid: true}
  ];
  // Идентификатор получателя
  string user_id = 2 [
    (validate.rules).string = {uuid: true}
  ];
  // Содержание уведомления
  string message = 3;
  // Тип уведомления
  NotificationType type = 4;
  // Время создания (Unix timestamp)
  int64 created_at = 5;
  // Статус прочтения
  bool is_read = 6;
}

// Предпочтения уведомлений пользователя
message NotificationPreferences {
  // Уведомления о новых сообщениях
  bool new_message = 1;
  // Уведомления о запросах в друзья
  bool friend_request = 2;
  // Системные уведомления
  bool system = 3;
}

// Типы уведомлений
enum NotificationType {
  // Неопределенный тип уведомления
  NOTIFICATION_TYPE_UNSPECIFIED = 0;
  // Новое сообщение
  NOTIFICATION_TYPE_NEW_MESSAGE = 1;
  // Запрос в друзья
  NOTIFICATION_TYPE_FRIEND_REQUEST = 2;
  // Системное уведомление
  NOTIFICATION_TYPE_SYSTEM = 3;
}
