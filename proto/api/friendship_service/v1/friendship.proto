syntax = "proto3";

package api.friendship_service.v1;

import "validate/validate.proto";
import "google/api/field_behavior.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/malytinKonstantin/go-messenger-mono/proto/pkg/api/friendship_service/v1;friendship_service";

// Сервис для управления дружбой между пользователями
service FriendshipService {
  // Отправка запроса на добавление в друзья
  rpc SendFriendRequest(SendFriendRequestRequest) returns (SendFriendRequestResponse) {
    option (google.api.http) = {
      post: "/v1/friendship/send-friend-request"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Отправка запроса на добавление в друзья"
      tags: "FriendshipService"
    };
  }

  // Принятие запроса на дружбу
  rpc AcceptFriendRequest(AcceptFriendRequestRequest) returns (AcceptFriendRequestResponse) {
    option (google.api.http) = {
      post: "/v1/friendship/accept-friend-request"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Принятие запроса на дружбу"
      tags: "FriendshipService"
    };
  }

  // Отклонение запроса на дружбу
  rpc RejectFriendRequest(RejectFriendRequestRequest) returns (RejectFriendRequestResponse) {
    option (google.api.http) = {
      post: "/v1/friendship/reject-friend-request"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Отклонение запроса на дружбу"
      tags: "FriendshipService"
    };
  }

  // Удаление пользователя из друзей
  rpc RemoveFriend(RemoveFriendRequest) returns (RemoveFriendResponse) {
    option (google.api.http) = {
      post: "/v1/friendship/remove-friend"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Удаление пользователя из друзей"
      tags: "FriendshipService"
    };
  }

  // Получение списка друзей
  rpc GetFriendsList(GetFriendsListRequest) returns (GetFriendsListResponse) {
    option (google.api.http) = {
      get: "/v1/friendship/friends"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Получение списка друзей"
      tags: "FriendshipService"
    };
  }

  // Получение списка запросов на дружбу
  rpc GetPendingRequests(GetPendingRequestsRequest) returns (GetPendingRequestsResponse) {
    option (google.api.http) = {
      get: "/v1/friendship/pending-requests"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Получение списка запросов на дружбу"
      tags: "FriendshipService"
    };
  }
}

// Перечисление статусов запроса на дружбу
enum FriendRequestStatus {
  UNKNOWN = 0;
  PENDING = 1;
  ACCEPTED = 2;
  REJECTED = 3;
}

// Сообщение для отправки запроса на добавление в друзья
message SendFriendRequestRequest {
  // Идентификатор пользователя, отправляющего запрос
  string sender_id = 1 [
    (validate.rules).string = {uuid: true},
    (google.api.field_behavior) = REQUIRED
  ];
  // Идентификатор пользователя, которому отправляется запрос
  string receiver_id = 2 [
    (validate.rules).string = {uuid: true},
    (google.api.field_behavior) = REQUIRED
  ];
}

// Ответ на запрос отправки запроса на добавление в друзья
message SendFriendRequestResponse {
  // Идентификатор созданного запроса на дружбу
  string request_id = 1 [
    (validate.rules).string = {uuid: true}
  ];
}

// Сообщение для принятия запроса на дружбу
message AcceptFriendRequestRequest {
  // Идентификатор запроса на дружбу
  string request_id = 1 [
    (validate.rules).string = {uuid: true},
    (google.api.field_behavior) = REQUIRED
  ];
}

// Ответ на принятие запроса на дружбу
message AcceptFriendRequestResponse {
  // Успешность операции
  bool success = 1;
}

// Сообщение для отклонения запроса на дружбу
message RejectFriendRequestRequest {
  // Идентификатор запроса на дружбу
  string request_id = 1 [
    (validate.rules).string = {uuid: true},
    (google.api.field_behavior) = REQUIRED
  ];
}

// Ответ на отклонение запроса на дружбу
message RejectFriendRequestResponse {
  // Успешность операции
  bool success = 1;
}

// Сообщение для удаления пользователя из друзей
message RemoveFriendRequest {
  // Идентификатор пользователя
  string user_id = 1 [
    (validate.rules).string = {uuid: true},
    (google.api.field_behavior) = REQUIRED
  ];
  // Идентификатор друга, которого удаляют
  string friend_id = 2 [
    (validate.rules).string = {uuid: true},
    (google.api.field_behavior) = REQUIRED
  ];
}

// Ответ на удаление пользователя из друзей
message RemoveFriendResponse {
  // Успешность операции
  bool success = 1;
}

// Сообщение для получения списка друзей
message GetFriendsListRequest {
  // Идентификатор пользователя
  string user_id = 1 [
    (validate.rules).string = {uuid: true},
    (google.api.field_behavior) = REQUIRED
  ];
}

// Ответ со списком друзей
message GetFriendsListResponse {
  // Список друзей
  repeated Friend friends = 1;
}

// Сообщение для получения списка запросов на дружбу
message GetPendingRequestsRequest {
  // Идентификатор пользователя
  string user_id = 1 [
    (validate.rules).string = {uuid: true},
    (google.api.field_behavior) = REQUIRED
  ];
}

// Ответ со списком запросов на дружбу
message GetPendingRequestsResponse {
  // Входящие запросы
  repeated FriendRequest incoming_requests = 1;
  // Исходящие запросы
  repeated FriendRequest outgoing_requests = 2;
}

// Информация о друге
message Friend {
  // Идентификатор друга
  string user_id = 1 [
    (validate.rules).string = {uuid: true}
  ];
  // Никнейм друга
  string nickname = 2;
  // URL аватарки
  string avatar_url = 3;
  // Время добавления в друзья
  google.protobuf.Timestamp added_at = 4;
}

// Информация о запросе на дружбу
message FriendRequest {
  // Идентификатор запроса
  string request_id = 1 [
    (validate.rules).string = {uuid: true}
  ];
  // Идентификатор отправителя
  string sender_id = 2 [
    (validate.rules).string = {uuid: true}
  ];
  // Идентификатор получателя
  string receiver_id = 3 [
    (validate.rules).string = {uuid: true}
  ];
  // Статус запроса
  FriendRequestStatus status = 4;
  // Время создания запроса
  google.protobuf.Timestamp created_at = 5;
  // Время обновления статуса
  google.protobuf.Timestamp updated_at = 6;
}