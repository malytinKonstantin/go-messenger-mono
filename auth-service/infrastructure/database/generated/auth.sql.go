// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"time"
)

const CreateOAuthAccount = `-- name: CreateOAuthAccount :one
INSERT INTO oauth_accounts (user_id, provider, provider_user_id)
VALUES ($1, $2, $3)
RETURNING id, user_id, provider, provider_user_id, created_at
`

type CreateOAuthAccountParams struct {
	UserID         uuid.UUID `json:"user_id"`
	Provider       string    `json:"provider"`
	ProviderUserID string    `json:"provider_user_id"`
}

func (q *Queries) CreateOAuthAccount(ctx context.Context, arg CreateOAuthAccountParams) (OauthAccounts, error) {
	row := q.queryRow(ctx, q.createOAuthAccountStmt, CreateOAuthAccount, arg.UserID, arg.Provider, arg.ProviderUserID)
	var i OauthAccounts
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.CreatedAt,
	)
	return i, err
}

const CreateResetPasswordToken = `-- name: CreateResetPasswordToken :one
INSERT INTO reset_password_tokens (user_id, expires_at)
VALUES ($1, $2)
RETURNING token, user_id, expires_at, created_at
`

type CreateResetPasswordTokenParams struct {
	UserID    uuid.UUID   `json:"user_id"`
	ExpiresAt **time.Time `json:"expires_at"`
}

func (q *Queries) CreateResetPasswordToken(ctx context.Context, arg CreateResetPasswordTokenParams) (ResetPasswordTokens, error) {
	row := q.queryRow(ctx, q.createResetPasswordTokenStmt, CreateResetPasswordToken, arg.UserID, arg.ExpiresAt)
	var i ResetPasswordTokens
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const CreateUser = `-- name: CreateUser :one
INSERT INTO user_credentials (email, password_hash)
VALUES ($1, $2)
RETURNING user_id, email, password_hash, is_verified, created_at, updated_at
`

type CreateUserParams struct {
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (UserCredentials, error) {
	row := q.queryRow(ctx, q.createUserStmt, CreateUser, arg.Email, arg.PasswordHash)
	var i UserCredentials
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.PasswordHash,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteResetPasswordToken = `-- name: DeleteResetPasswordToken :exec
DELETE FROM reset_password_tokens
WHERE token = $1
`

func (q *Queries) DeleteResetPasswordToken(ctx context.Context, token uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteResetPasswordTokenStmt, DeleteResetPasswordToken, token)
	return err
}

const GetOAuthAccount = `-- name: GetOAuthAccount :one
SELECT id, user_id, provider, provider_user_id, created_at FROM oauth_accounts
WHERE provider = $1 AND provider_user_id = $2 LIMIT 1
`

type GetOAuthAccountParams struct {
	Provider       string `json:"provider"`
	ProviderUserID string `json:"provider_user_id"`
}

func (q *Queries) GetOAuthAccount(ctx context.Context, arg GetOAuthAccountParams) (OauthAccounts, error) {
	row := q.queryRow(ctx, q.getOAuthAccountStmt, GetOAuthAccount, arg.Provider, arg.ProviderUserID)
	var i OauthAccounts
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.CreatedAt,
	)
	return i, err
}

const GetResetPasswordToken = `-- name: GetResetPasswordToken :one
SELECT token, user_id, expires_at, created_at FROM reset_password_tokens
WHERE token = $1 AND expires_at > NOW() LIMIT 1
`

func (q *Queries) GetResetPasswordToken(ctx context.Context, token uuid.UUID) (ResetPasswordTokens, error) {
	row := q.queryRow(ctx, q.getResetPasswordTokenStmt, GetResetPasswordToken, token)
	var i ResetPasswordTokens
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const GetUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, email, password_hash, is_verified, created_at, updated_at FROM user_credentials
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (UserCredentials, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, GetUserByEmail, email)
	var i UserCredentials
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.PasswordHash,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE user_credentials
SET password_hash = $1, updated_at = NOW()
WHERE user_id = $2
`

type UpdateUserPasswordParams struct {
	PasswordHash string    `json:"password_hash"`
	UserID       uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.exec(ctx, q.updateUserPasswordStmt, UpdateUserPassword, arg.PasswordHash, arg.UserID)
	return err
}

const UpdateUserVerificationStatus = `-- name: UpdateUserVerificationStatus :exec
UPDATE user_credentials
SET is_verified = $1, updated_at = NOW()
WHERE user_id = $2
`

type UpdateUserVerificationStatusParams struct {
	IsVerified bool      `json:"is_verified"`
	UserID     uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateUserVerificationStatus(ctx context.Context, arg UpdateUserVerificationStatusParams) error {
	_, err := q.exec(ctx, q.updateUserVerificationStatusStmt, UpdateUserVerificationStatus, arg.IsVerified, arg.UserID)
	return err
}
