// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/malytinKonstantin/go-messenger-mono/auth-service/infrastructure/database/model"
)

func newResetPasswordToken(db *gorm.DB, opts ...gen.DOOption) resetPasswordToken {
	_resetPasswordToken := resetPasswordToken{}

	_resetPasswordToken.resetPasswordTokenDo.UseDB(db, opts...)
	_resetPasswordToken.resetPasswordTokenDo.UseModel(&model.ResetPasswordToken{})

	tableName := _resetPasswordToken.resetPasswordTokenDo.TableName()
	_resetPasswordToken.ALL = field.NewAsterisk(tableName)
	_resetPasswordToken.Token = field.NewString(tableName, "token")
	_resetPasswordToken.UserID = field.NewString(tableName, "user_id")
	_resetPasswordToken.ExpiresAt = field.NewTime(tableName, "expires_at")
	_resetPasswordToken.CreatedAt = field.NewTime(tableName, "created_at")

	_resetPasswordToken.fillFieldMap()

	return _resetPasswordToken
}

type resetPasswordToken struct {
	resetPasswordTokenDo resetPasswordTokenDo

	ALL       field.Asterisk
	Token     field.String
	UserID    field.String
	ExpiresAt field.Time
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (r resetPasswordToken) Table(newTableName string) *resetPasswordToken {
	r.resetPasswordTokenDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r resetPasswordToken) As(alias string) *resetPasswordToken {
	r.resetPasswordTokenDo.DO = *(r.resetPasswordTokenDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *resetPasswordToken) updateTableName(table string) *resetPasswordToken {
	r.ALL = field.NewAsterisk(table)
	r.Token = field.NewString(table, "token")
	r.UserID = field.NewString(table, "user_id")
	r.ExpiresAt = field.NewTime(table, "expires_at")
	r.CreatedAt = field.NewTime(table, "created_at")

	r.fillFieldMap()

	return r
}

func (r *resetPasswordToken) WithContext(ctx context.Context) IResetPasswordTokenDo {
	return r.resetPasswordTokenDo.WithContext(ctx)
}

func (r resetPasswordToken) TableName() string { return r.resetPasswordTokenDo.TableName() }

func (r resetPasswordToken) Alias() string { return r.resetPasswordTokenDo.Alias() }

func (r resetPasswordToken) Columns(cols ...field.Expr) gen.Columns {
	return r.resetPasswordTokenDo.Columns(cols...)
}

func (r *resetPasswordToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *resetPasswordToken) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 4)
	r.fieldMap["token"] = r.Token
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["expires_at"] = r.ExpiresAt
	r.fieldMap["created_at"] = r.CreatedAt
}

func (r resetPasswordToken) clone(db *gorm.DB) resetPasswordToken {
	r.resetPasswordTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r resetPasswordToken) replaceDB(db *gorm.DB) resetPasswordToken {
	r.resetPasswordTokenDo.ReplaceDB(db)
	return r
}

type resetPasswordTokenDo struct{ gen.DO }

type IResetPasswordTokenDo interface {
	gen.SubQuery
	Debug() IResetPasswordTokenDo
	WithContext(ctx context.Context) IResetPasswordTokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IResetPasswordTokenDo
	WriteDB() IResetPasswordTokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IResetPasswordTokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IResetPasswordTokenDo
	Not(conds ...gen.Condition) IResetPasswordTokenDo
	Or(conds ...gen.Condition) IResetPasswordTokenDo
	Select(conds ...field.Expr) IResetPasswordTokenDo
	Where(conds ...gen.Condition) IResetPasswordTokenDo
	Order(conds ...field.Expr) IResetPasswordTokenDo
	Distinct(cols ...field.Expr) IResetPasswordTokenDo
	Omit(cols ...field.Expr) IResetPasswordTokenDo
	Join(table schema.Tabler, on ...field.Expr) IResetPasswordTokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IResetPasswordTokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) IResetPasswordTokenDo
	Group(cols ...field.Expr) IResetPasswordTokenDo
	Having(conds ...gen.Condition) IResetPasswordTokenDo
	Limit(limit int) IResetPasswordTokenDo
	Offset(offset int) IResetPasswordTokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IResetPasswordTokenDo
	Unscoped() IResetPasswordTokenDo
	Create(values ...*model.ResetPasswordToken) error
	CreateInBatches(values []*model.ResetPasswordToken, batchSize int) error
	Save(values ...*model.ResetPasswordToken) error
	First() (*model.ResetPasswordToken, error)
	Take() (*model.ResetPasswordToken, error)
	Last() (*model.ResetPasswordToken, error)
	Find() ([]*model.ResetPasswordToken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ResetPasswordToken, err error)
	FindInBatches(result *[]*model.ResetPasswordToken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ResetPasswordToken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IResetPasswordTokenDo
	Assign(attrs ...field.AssignExpr) IResetPasswordTokenDo
	Joins(fields ...field.RelationField) IResetPasswordTokenDo
	Preload(fields ...field.RelationField) IResetPasswordTokenDo
	FirstOrInit() (*model.ResetPasswordToken, error)
	FirstOrCreate() (*model.ResetPasswordToken, error)
	FindByPage(offset int, limit int) (result []*model.ResetPasswordToken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IResetPasswordTokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r resetPasswordTokenDo) Debug() IResetPasswordTokenDo {
	return r.withDO(r.DO.Debug())
}

func (r resetPasswordTokenDo) WithContext(ctx context.Context) IResetPasswordTokenDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r resetPasswordTokenDo) ReadDB() IResetPasswordTokenDo {
	return r.Clauses(dbresolver.Read)
}

func (r resetPasswordTokenDo) WriteDB() IResetPasswordTokenDo {
	return r.Clauses(dbresolver.Write)
}

func (r resetPasswordTokenDo) Session(config *gorm.Session) IResetPasswordTokenDo {
	return r.withDO(r.DO.Session(config))
}

func (r resetPasswordTokenDo) Clauses(conds ...clause.Expression) IResetPasswordTokenDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r resetPasswordTokenDo) Returning(value interface{}, columns ...string) IResetPasswordTokenDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r resetPasswordTokenDo) Not(conds ...gen.Condition) IResetPasswordTokenDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r resetPasswordTokenDo) Or(conds ...gen.Condition) IResetPasswordTokenDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r resetPasswordTokenDo) Select(conds ...field.Expr) IResetPasswordTokenDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r resetPasswordTokenDo) Where(conds ...gen.Condition) IResetPasswordTokenDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r resetPasswordTokenDo) Order(conds ...field.Expr) IResetPasswordTokenDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r resetPasswordTokenDo) Distinct(cols ...field.Expr) IResetPasswordTokenDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r resetPasswordTokenDo) Omit(cols ...field.Expr) IResetPasswordTokenDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r resetPasswordTokenDo) Join(table schema.Tabler, on ...field.Expr) IResetPasswordTokenDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r resetPasswordTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) IResetPasswordTokenDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r resetPasswordTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) IResetPasswordTokenDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r resetPasswordTokenDo) Group(cols ...field.Expr) IResetPasswordTokenDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r resetPasswordTokenDo) Having(conds ...gen.Condition) IResetPasswordTokenDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r resetPasswordTokenDo) Limit(limit int) IResetPasswordTokenDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r resetPasswordTokenDo) Offset(offset int) IResetPasswordTokenDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r resetPasswordTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IResetPasswordTokenDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r resetPasswordTokenDo) Unscoped() IResetPasswordTokenDo {
	return r.withDO(r.DO.Unscoped())
}

func (r resetPasswordTokenDo) Create(values ...*model.ResetPasswordToken) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r resetPasswordTokenDo) CreateInBatches(values []*model.ResetPasswordToken, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r resetPasswordTokenDo) Save(values ...*model.ResetPasswordToken) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r resetPasswordTokenDo) First() (*model.ResetPasswordToken, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResetPasswordToken), nil
	}
}

func (r resetPasswordTokenDo) Take() (*model.ResetPasswordToken, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResetPasswordToken), nil
	}
}

func (r resetPasswordTokenDo) Last() (*model.ResetPasswordToken, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResetPasswordToken), nil
	}
}

func (r resetPasswordTokenDo) Find() ([]*model.ResetPasswordToken, error) {
	result, err := r.DO.Find()
	return result.([]*model.ResetPasswordToken), err
}

func (r resetPasswordTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ResetPasswordToken, err error) {
	buf := make([]*model.ResetPasswordToken, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r resetPasswordTokenDo) FindInBatches(result *[]*model.ResetPasswordToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r resetPasswordTokenDo) Attrs(attrs ...field.AssignExpr) IResetPasswordTokenDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r resetPasswordTokenDo) Assign(attrs ...field.AssignExpr) IResetPasswordTokenDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r resetPasswordTokenDo) Joins(fields ...field.RelationField) IResetPasswordTokenDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r resetPasswordTokenDo) Preload(fields ...field.RelationField) IResetPasswordTokenDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r resetPasswordTokenDo) FirstOrInit() (*model.ResetPasswordToken, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResetPasswordToken), nil
	}
}

func (r resetPasswordTokenDo) FirstOrCreate() (*model.ResetPasswordToken, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResetPasswordToken), nil
	}
}

func (r resetPasswordTokenDo) FindByPage(offset int, limit int) (result []*model.ResetPasswordToken, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r resetPasswordTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r resetPasswordTokenDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r resetPasswordTokenDo) Delete(models ...*model.ResetPasswordToken) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *resetPasswordTokenDo) withDO(do gen.Dao) *resetPasswordTokenDo {
	r.DO = *do.(*gen.DO)
	return r
}
