// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/malytinKonstantin/go-messenger-mono/auth-service/infrastructure/database/model"
)

func newOauthAccount(db *gorm.DB, opts ...gen.DOOption) oauthAccount {
	_oauthAccount := oauthAccount{}

	_oauthAccount.oauthAccountDo.UseDB(db, opts...)
	_oauthAccount.oauthAccountDo.UseModel(&model.OauthAccount{})

	tableName := _oauthAccount.oauthAccountDo.TableName()
	_oauthAccount.ALL = field.NewAsterisk(tableName)
	_oauthAccount.ID = field.NewInt64(tableName, "id")
	_oauthAccount.UserID = field.NewString(tableName, "user_id")
	_oauthAccount.Provider = field.NewString(tableName, "provider")
	_oauthAccount.ProviderUserID = field.NewString(tableName, "provider_user_id")
	_oauthAccount.CreatedAt = field.NewTime(tableName, "created_at")

	_oauthAccount.fillFieldMap()

	return _oauthAccount
}

type oauthAccount struct {
	oauthAccountDo oauthAccountDo

	ALL            field.Asterisk
	ID             field.Int64
	UserID         field.String
	Provider       field.String
	ProviderUserID field.String
	CreatedAt      field.Time

	fieldMap map[string]field.Expr
}

func (o oauthAccount) Table(newTableName string) *oauthAccount {
	o.oauthAccountDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oauthAccount) As(alias string) *oauthAccount {
	o.oauthAccountDo.DO = *(o.oauthAccountDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oauthAccount) updateTableName(table string) *oauthAccount {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.UserID = field.NewString(table, "user_id")
	o.Provider = field.NewString(table, "provider")
	o.ProviderUserID = field.NewString(table, "provider_user_id")
	o.CreatedAt = field.NewTime(table, "created_at")

	o.fillFieldMap()

	return o
}

func (o *oauthAccount) WithContext(ctx context.Context) IOauthAccountDo {
	return o.oauthAccountDo.WithContext(ctx)
}

func (o oauthAccount) TableName() string { return o.oauthAccountDo.TableName() }

func (o oauthAccount) Alias() string { return o.oauthAccountDo.Alias() }

func (o oauthAccount) Columns(cols ...field.Expr) gen.Columns {
	return o.oauthAccountDo.Columns(cols...)
}

func (o *oauthAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oauthAccount) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 5)
	o.fieldMap["id"] = o.ID
	o.fieldMap["user_id"] = o.UserID
	o.fieldMap["provider"] = o.Provider
	o.fieldMap["provider_user_id"] = o.ProviderUserID
	o.fieldMap["created_at"] = o.CreatedAt
}

func (o oauthAccount) clone(db *gorm.DB) oauthAccount {
	o.oauthAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oauthAccount) replaceDB(db *gorm.DB) oauthAccount {
	o.oauthAccountDo.ReplaceDB(db)
	return o
}

type oauthAccountDo struct{ gen.DO }

type IOauthAccountDo interface {
	gen.SubQuery
	Debug() IOauthAccountDo
	WithContext(ctx context.Context) IOauthAccountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOauthAccountDo
	WriteDB() IOauthAccountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOauthAccountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOauthAccountDo
	Not(conds ...gen.Condition) IOauthAccountDo
	Or(conds ...gen.Condition) IOauthAccountDo
	Select(conds ...field.Expr) IOauthAccountDo
	Where(conds ...gen.Condition) IOauthAccountDo
	Order(conds ...field.Expr) IOauthAccountDo
	Distinct(cols ...field.Expr) IOauthAccountDo
	Omit(cols ...field.Expr) IOauthAccountDo
	Join(table schema.Tabler, on ...field.Expr) IOauthAccountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOauthAccountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOauthAccountDo
	Group(cols ...field.Expr) IOauthAccountDo
	Having(conds ...gen.Condition) IOauthAccountDo
	Limit(limit int) IOauthAccountDo
	Offset(offset int) IOauthAccountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOauthAccountDo
	Unscoped() IOauthAccountDo
	Create(values ...*model.OauthAccount) error
	CreateInBatches(values []*model.OauthAccount, batchSize int) error
	Save(values ...*model.OauthAccount) error
	First() (*model.OauthAccount, error)
	Take() (*model.OauthAccount, error)
	Last() (*model.OauthAccount, error)
	Find() ([]*model.OauthAccount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OauthAccount, err error)
	FindInBatches(result *[]*model.OauthAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OauthAccount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOauthAccountDo
	Assign(attrs ...field.AssignExpr) IOauthAccountDo
	Joins(fields ...field.RelationField) IOauthAccountDo
	Preload(fields ...field.RelationField) IOauthAccountDo
	FirstOrInit() (*model.OauthAccount, error)
	FirstOrCreate() (*model.OauthAccount, error)
	FindByPage(offset int, limit int) (result []*model.OauthAccount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOauthAccountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o oauthAccountDo) Debug() IOauthAccountDo {
	return o.withDO(o.DO.Debug())
}

func (o oauthAccountDo) WithContext(ctx context.Context) IOauthAccountDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oauthAccountDo) ReadDB() IOauthAccountDo {
	return o.Clauses(dbresolver.Read)
}

func (o oauthAccountDo) WriteDB() IOauthAccountDo {
	return o.Clauses(dbresolver.Write)
}

func (o oauthAccountDo) Session(config *gorm.Session) IOauthAccountDo {
	return o.withDO(o.DO.Session(config))
}

func (o oauthAccountDo) Clauses(conds ...clause.Expression) IOauthAccountDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oauthAccountDo) Returning(value interface{}, columns ...string) IOauthAccountDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oauthAccountDo) Not(conds ...gen.Condition) IOauthAccountDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oauthAccountDo) Or(conds ...gen.Condition) IOauthAccountDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oauthAccountDo) Select(conds ...field.Expr) IOauthAccountDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oauthAccountDo) Where(conds ...gen.Condition) IOauthAccountDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oauthAccountDo) Order(conds ...field.Expr) IOauthAccountDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oauthAccountDo) Distinct(cols ...field.Expr) IOauthAccountDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oauthAccountDo) Omit(cols ...field.Expr) IOauthAccountDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oauthAccountDo) Join(table schema.Tabler, on ...field.Expr) IOauthAccountDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oauthAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOauthAccountDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oauthAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) IOauthAccountDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oauthAccountDo) Group(cols ...field.Expr) IOauthAccountDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oauthAccountDo) Having(conds ...gen.Condition) IOauthAccountDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oauthAccountDo) Limit(limit int) IOauthAccountDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oauthAccountDo) Offset(offset int) IOauthAccountDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oauthAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOauthAccountDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oauthAccountDo) Unscoped() IOauthAccountDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oauthAccountDo) Create(values ...*model.OauthAccount) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oauthAccountDo) CreateInBatches(values []*model.OauthAccount, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oauthAccountDo) Save(values ...*model.OauthAccount) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oauthAccountDo) First() (*model.OauthAccount, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OauthAccount), nil
	}
}

func (o oauthAccountDo) Take() (*model.OauthAccount, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OauthAccount), nil
	}
}

func (o oauthAccountDo) Last() (*model.OauthAccount, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OauthAccount), nil
	}
}

func (o oauthAccountDo) Find() ([]*model.OauthAccount, error) {
	result, err := o.DO.Find()
	return result.([]*model.OauthAccount), err
}

func (o oauthAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OauthAccount, err error) {
	buf := make([]*model.OauthAccount, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oauthAccountDo) FindInBatches(result *[]*model.OauthAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oauthAccountDo) Attrs(attrs ...field.AssignExpr) IOauthAccountDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oauthAccountDo) Assign(attrs ...field.AssignExpr) IOauthAccountDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oauthAccountDo) Joins(fields ...field.RelationField) IOauthAccountDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oauthAccountDo) Preload(fields ...field.RelationField) IOauthAccountDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oauthAccountDo) FirstOrInit() (*model.OauthAccount, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OauthAccount), nil
	}
}

func (o oauthAccountDo) FirstOrCreate() (*model.OauthAccount, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OauthAccount), nil
	}
}

func (o oauthAccountDo) FindByPage(offset int, limit int) (result []*model.OauthAccount, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oauthAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oauthAccountDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oauthAccountDo) Delete(models ...*model.OauthAccount) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oauthAccountDo) withDO(do gen.Dao) *oauthAccountDo {
	o.DO = *do.(*gen.DO)
	return o
}
