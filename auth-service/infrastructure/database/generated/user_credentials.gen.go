// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/malytinKonstantin/go-messenger-mono/auth-service/infrastructure/database/model"
)

func newUserCredential(db *gorm.DB, opts ...gen.DOOption) userCredential {
	_userCredential := userCredential{}

	_userCredential.userCredentialDo.UseDB(db, opts...)
	_userCredential.userCredentialDo.UseModel(&model.UserCredential{})

	tableName := _userCredential.userCredentialDo.TableName()
	_userCredential.ALL = field.NewAsterisk(tableName)
	_userCredential.ID = field.NewInt64(tableName, "id")
	_userCredential.UserID = field.NewString(tableName, "user_id")
	_userCredential.Email = field.NewString(tableName, "email")
	_userCredential.PasswordHash = field.NewString(tableName, "password_hash")
	_userCredential.IsVerified = field.NewBool(tableName, "is_verified")
	_userCredential.CreatedAt = field.NewTime(tableName, "created_at")
	_userCredential.UpdatedAt = field.NewTime(tableName, "updated_at")

	_userCredential.fillFieldMap()

	return _userCredential
}

type userCredential struct {
	userCredentialDo userCredentialDo

	ALL          field.Asterisk
	ID           field.Int64
	UserID       field.String
	Email        field.String
	PasswordHash field.String
	IsVerified   field.Bool
	CreatedAt    field.Time
	UpdatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (u userCredential) Table(newTableName string) *userCredential {
	u.userCredentialDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userCredential) As(alias string) *userCredential {
	u.userCredentialDo.DO = *(u.userCredentialDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userCredential) updateTableName(table string) *userCredential {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewString(table, "user_id")
	u.Email = field.NewString(table, "email")
	u.PasswordHash = field.NewString(table, "password_hash")
	u.IsVerified = field.NewBool(table, "is_verified")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userCredential) WithContext(ctx context.Context) IUserCredentialDo {
	return u.userCredentialDo.WithContext(ctx)
}

func (u userCredential) TableName() string { return u.userCredentialDo.TableName() }

func (u userCredential) Alias() string { return u.userCredentialDo.Alias() }

func (u userCredential) Columns(cols ...field.Expr) gen.Columns {
	return u.userCredentialDo.Columns(cols...)
}

func (u *userCredential) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userCredential) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["email"] = u.Email
	u.fieldMap["password_hash"] = u.PasswordHash
	u.fieldMap["is_verified"] = u.IsVerified
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userCredential) clone(db *gorm.DB) userCredential {
	u.userCredentialDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userCredential) replaceDB(db *gorm.DB) userCredential {
	u.userCredentialDo.ReplaceDB(db)
	return u
}

type userCredentialDo struct{ gen.DO }

type IUserCredentialDo interface {
	gen.SubQuery
	Debug() IUserCredentialDo
	WithContext(ctx context.Context) IUserCredentialDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserCredentialDo
	WriteDB() IUserCredentialDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserCredentialDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserCredentialDo
	Not(conds ...gen.Condition) IUserCredentialDo
	Or(conds ...gen.Condition) IUserCredentialDo
	Select(conds ...field.Expr) IUserCredentialDo
	Where(conds ...gen.Condition) IUserCredentialDo
	Order(conds ...field.Expr) IUserCredentialDo
	Distinct(cols ...field.Expr) IUserCredentialDo
	Omit(cols ...field.Expr) IUserCredentialDo
	Join(table schema.Tabler, on ...field.Expr) IUserCredentialDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserCredentialDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserCredentialDo
	Group(cols ...field.Expr) IUserCredentialDo
	Having(conds ...gen.Condition) IUserCredentialDo
	Limit(limit int) IUserCredentialDo
	Offset(offset int) IUserCredentialDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserCredentialDo
	Unscoped() IUserCredentialDo
	Create(values ...*model.UserCredential) error
	CreateInBatches(values []*model.UserCredential, batchSize int) error
	Save(values ...*model.UserCredential) error
	First() (*model.UserCredential, error)
	Take() (*model.UserCredential, error)
	Last() (*model.UserCredential, error)
	Find() ([]*model.UserCredential, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCredential, err error)
	FindInBatches(result *[]*model.UserCredential, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserCredential) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserCredentialDo
	Assign(attrs ...field.AssignExpr) IUserCredentialDo
	Joins(fields ...field.RelationField) IUserCredentialDo
	Preload(fields ...field.RelationField) IUserCredentialDo
	FirstOrInit() (*model.UserCredential, error)
	FirstOrCreate() (*model.UserCredential, error)
	FindByPage(offset int, limit int) (result []*model.UserCredential, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserCredentialDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userCredentialDo) Debug() IUserCredentialDo {
	return u.withDO(u.DO.Debug())
}

func (u userCredentialDo) WithContext(ctx context.Context) IUserCredentialDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userCredentialDo) ReadDB() IUserCredentialDo {
	return u.Clauses(dbresolver.Read)
}

func (u userCredentialDo) WriteDB() IUserCredentialDo {
	return u.Clauses(dbresolver.Write)
}

func (u userCredentialDo) Session(config *gorm.Session) IUserCredentialDo {
	return u.withDO(u.DO.Session(config))
}

func (u userCredentialDo) Clauses(conds ...clause.Expression) IUserCredentialDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userCredentialDo) Returning(value interface{}, columns ...string) IUserCredentialDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userCredentialDo) Not(conds ...gen.Condition) IUserCredentialDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userCredentialDo) Or(conds ...gen.Condition) IUserCredentialDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userCredentialDo) Select(conds ...field.Expr) IUserCredentialDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userCredentialDo) Where(conds ...gen.Condition) IUserCredentialDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userCredentialDo) Order(conds ...field.Expr) IUserCredentialDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userCredentialDo) Distinct(cols ...field.Expr) IUserCredentialDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userCredentialDo) Omit(cols ...field.Expr) IUserCredentialDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userCredentialDo) Join(table schema.Tabler, on ...field.Expr) IUserCredentialDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userCredentialDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserCredentialDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userCredentialDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserCredentialDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userCredentialDo) Group(cols ...field.Expr) IUserCredentialDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userCredentialDo) Having(conds ...gen.Condition) IUserCredentialDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userCredentialDo) Limit(limit int) IUserCredentialDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userCredentialDo) Offset(offset int) IUserCredentialDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userCredentialDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserCredentialDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userCredentialDo) Unscoped() IUserCredentialDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userCredentialDo) Create(values ...*model.UserCredential) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userCredentialDo) CreateInBatches(values []*model.UserCredential, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userCredentialDo) Save(values ...*model.UserCredential) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userCredentialDo) First() (*model.UserCredential, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCredential), nil
	}
}

func (u userCredentialDo) Take() (*model.UserCredential, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCredential), nil
	}
}

func (u userCredentialDo) Last() (*model.UserCredential, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCredential), nil
	}
}

func (u userCredentialDo) Find() ([]*model.UserCredential, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserCredential), err
}

func (u userCredentialDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCredential, err error) {
	buf := make([]*model.UserCredential, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userCredentialDo) FindInBatches(result *[]*model.UserCredential, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userCredentialDo) Attrs(attrs ...field.AssignExpr) IUserCredentialDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userCredentialDo) Assign(attrs ...field.AssignExpr) IUserCredentialDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userCredentialDo) Joins(fields ...field.RelationField) IUserCredentialDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userCredentialDo) Preload(fields ...field.RelationField) IUserCredentialDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userCredentialDo) FirstOrInit() (*model.UserCredential, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCredential), nil
	}
}

func (u userCredentialDo) FirstOrCreate() (*model.UserCredential, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCredential), nil
	}
}

func (u userCredentialDo) FindByPage(offset int, limit int) (result []*model.UserCredential, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userCredentialDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userCredentialDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userCredentialDo) Delete(models ...*model.UserCredential) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userCredentialDo) withDO(do gen.Dao) *userCredentialDo {
	u.DO = *do.(*gen.DO)
	return u
}
