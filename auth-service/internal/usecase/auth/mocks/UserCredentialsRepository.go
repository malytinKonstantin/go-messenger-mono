// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/malytinKonstantin/go-messenger-mono/auth-service/infrastructure/database/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserCredentialsRepository is an autogenerated mock type for the UserCredentialsRepository type
type UserCredentialsRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user
func (_m *UserCredentialsRepository) Create(ctx context.Context, user *model.UserCredential) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserCredential) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, userID
func (_m *UserCredentialsRepository) Delete(ctx context.Context, userID uuid.UUID) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *UserCredentialsRepository) GetByEmail(ctx context.Context, email string) (*model.UserCredential, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *model.UserCredential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.UserCredential, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.UserCredential); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserCredential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, userID
func (_m *UserCredentialsRepository) GetByID(ctx context.Context, userID uuid.UUID) (*model.UserCredential, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.UserCredential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.UserCredential, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.UserCredential); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserCredential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, user
func (_m *UserCredentialsRepository) Update(ctx context.Context, user *model.UserCredential) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserCredential) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: ctx, userID, newPasswordHash
func (_m *UserCredentialsRepository) UpdatePassword(ctx context.Context, userID uuid.UUID, newPasswordHash string) error {
	ret := _m.Called(ctx, userID, newPasswordHash)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, userID, newPasswordHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVerificationStatus provides a mock function with given fields: ctx, userID, isVerified
func (_m *UserCredentialsRepository) UpdateVerificationStatus(ctx context.Context, userID uuid.UUID, isVerified bool) error {
	ret := _m.Called(ctx, userID, isVerified)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVerificationStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) error); ok {
		r0 = rf(ctx, userID, isVerified)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserCredentialsRepository creates a new instance of UserCredentialsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserCredentialsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserCredentialsRepository {
	mock := &UserCredentialsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
