// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/malytinKonstantin/go-messenger-mono/auth-service/infrastructure/database/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// OauthAccountRepository is an autogenerated mock type for the OauthAccountRepository type
type OauthAccountRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, account
func (_m *OauthAccountRepository) Create(ctx context.Context, account *model.OauthAccount) error {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.OauthAccount) error); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, userID
func (_m *OauthAccountRepository) Delete(ctx context.Context, userID uuid.UUID) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, userID
func (_m *OauthAccountRepository) GetByID(ctx context.Context, userID uuid.UUID) (*model.OauthAccount, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.OauthAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.OauthAccount, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.OauthAccount); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OauthAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByProvider provides a mock function with given fields: ctx, provider, providerUserID
func (_m *OauthAccountRepository) GetByProvider(ctx context.Context, provider string, providerUserID string) (*model.OauthAccount, error) {
	ret := _m.Called(ctx, provider, providerUserID)

	if len(ret) == 0 {
		panic("no return value specified for GetByProvider")
	}

	var r0 *model.OauthAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.OauthAccount, error)); ok {
		return rf(ctx, provider, providerUserID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.OauthAccount); ok {
		r0 = rf(ctx, provider, providerUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OauthAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, provider, providerUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, account
func (_m *OauthAccountRepository) Update(ctx context.Context, account *model.OauthAccount) error {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.OauthAccount) error); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOauthAccountRepository creates a new instance of OauthAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOauthAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OauthAccountRepository {
	mock := &OauthAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
