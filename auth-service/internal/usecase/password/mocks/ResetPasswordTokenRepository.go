// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/malytinKonstantin/go-messenger-mono/auth-service/infrastructure/database/model"
	mock "github.com/stretchr/testify/mock"
)

// ResetPasswordTokenRepository is an autogenerated mock type for the ResetPasswordTokenRepository type
type ResetPasswordTokenRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, token
func (_m *ResetPasswordTokenRepository) Create(ctx context.Context, token *model.ResetPasswordToken) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ResetPasswordToken) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, token
func (_m *ResetPasswordTokenRepository) Delete(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExpiredTokens provides a mock function with given fields: ctx
func (_m *ResetPasswordTokenRepository) DeleteExpiredTokens(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpiredTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByToken provides a mock function with given fields: ctx, token
func (_m *ResetPasswordTokenRepository) GetByToken(ctx context.Context, token string) (*model.ResetPasswordToken, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetByToken")
	}

	var r0 *model.ResetPasswordToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.ResetPasswordToken, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.ResetPasswordToken); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ResetPasswordToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewResetPasswordTokenRepository creates a new instance of ResetPasswordTokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResetPasswordTokenRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResetPasswordTokenRepository {
	mock := &ResetPasswordTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
