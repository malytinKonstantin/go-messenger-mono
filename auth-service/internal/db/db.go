// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createOAuthAccountStmt, err = db.PrepareContext(ctx, CreateOAuthAccount); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOAuthAccount: %w", err)
	}
	if q.createResetPasswordTokenStmt, err = db.PrepareContext(ctx, CreateResetPasswordToken); err != nil {
		return nil, fmt.Errorf("error preparing query CreateResetPasswordToken: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, CreateUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteResetPasswordTokenStmt, err = db.PrepareContext(ctx, DeleteResetPasswordToken); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteResetPasswordToken: %w", err)
	}
	if q.getOAuthAccountStmt, err = db.PrepareContext(ctx, GetOAuthAccount); err != nil {
		return nil, fmt.Errorf("error preparing query GetOAuthAccount: %w", err)
	}
	if q.getResetPasswordTokenStmt, err = db.PrepareContext(ctx, GetResetPasswordToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetResetPasswordToken: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, GetUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, UpdateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	if q.updateUserVerificationStatusStmt, err = db.PrepareContext(ctx, UpdateUserVerificationStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserVerificationStatus: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createOAuthAccountStmt != nil {
		if cerr := q.createOAuthAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOAuthAccountStmt: %w", cerr)
		}
	}
	if q.createResetPasswordTokenStmt != nil {
		if cerr := q.createResetPasswordTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createResetPasswordTokenStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteResetPasswordTokenStmt != nil {
		if cerr := q.deleteResetPasswordTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteResetPasswordTokenStmt: %w", cerr)
		}
	}
	if q.getOAuthAccountStmt != nil {
		if cerr := q.getOAuthAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOAuthAccountStmt: %w", cerr)
		}
	}
	if q.getResetPasswordTokenStmt != nil {
		if cerr := q.getResetPasswordTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getResetPasswordTokenStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	if q.updateUserVerificationStatusStmt != nil {
		if cerr := q.updateUserVerificationStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserVerificationStatusStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                               DBTX
	tx                               *sql.Tx
	createOAuthAccountStmt           *sql.Stmt
	createResetPasswordTokenStmt     *sql.Stmt
	createUserStmt                   *sql.Stmt
	deleteResetPasswordTokenStmt     *sql.Stmt
	getOAuthAccountStmt              *sql.Stmt
	getResetPasswordTokenStmt        *sql.Stmt
	getUserByEmailStmt               *sql.Stmt
	updateUserPasswordStmt           *sql.Stmt
	updateUserVerificationStatusStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                               tx,
		tx:                               tx,
		createOAuthAccountStmt:           q.createOAuthAccountStmt,
		createResetPasswordTokenStmt:     q.createResetPasswordTokenStmt,
		createUserStmt:                   q.createUserStmt,
		deleteResetPasswordTokenStmt:     q.deleteResetPasswordTokenStmt,
		getOAuthAccountStmt:              q.getOAuthAccountStmt,
		getResetPasswordTokenStmt:        q.getResetPasswordTokenStmt,
		getUserByEmailStmt:               q.getUserByEmailStmt,
		updateUserPasswordStmt:           q.updateUserPasswordStmt,
		updateUserVerificationStatusStmt: q.updateUserVerificationStatusStmt,
	}
}
